"{{{ Unite.vim settings  keep it last
function Zip(zipFile, files)
    let destFile=a:zipFile.".zip"
    let cmd="!zip ".destFile." ".a:files
    execute cmd
endfunction
let ZipAction = {
\ 'is_selectable' : 1,
\ }
function! ZipAction.func(candidates)
  "todo: handle the directory case
  let zipFile = input('zip file name:')
  let files=[]
  for candidate in a:candidates
      call add(files, candidate.action__path)
  endfor
  let filesList = join(files)
  call Zip(zipFile, filesList)
endfunction

call unite#custom#action('file', 'zip', ZipAction)
unlet ZipAction

let g:unite_enable_start_insert = 1
let g:unite_split_rule = "botright"
nnoremap    [unite]   <Nop>
nmap    z [unite]

call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.svn/', '\.git/','\.obj$', 'bin/', 'obj/',
      \ '\.so$', '\.exe$', '\.a$', '\.dep$',
      \ '\.dla$', '\.dba$', '\.o$', '\.dbo$',
      \ '\.d$', '\.ti$', '\.map$', '\.obmp$',
      \ '\.ico$', '\.RMSfont$', '\.bin$', '\.idb$',
      \ '\.pdb$', '\.res$', '\.dll$', '\.dblite$',
      \ '\.exp$', '\.lib$', 'headers/', '\.ilk$',
      \ '\.pyc$', '\.pyd$', '\.manifest$',
      \ ], '\|'))

call unite#custom#source(
    \ 'buffer,file_rec/async,file_rec', 'matchers',
    \ ['converter_tail', 'matcher_default'])
call unite#custom#source(
    \ 'file_rec/async,file_rec', 'converters',
    \ ['converter_file_directory'])
call unite#filters#matcher_default#use(['matcher_fuzzy'])
"call unite#filters#sorter_default#use(['sorter_rank'])

let g:unite_source_history_yank_enable = 1

nnoremap <leader>/ :Unite grep:.<cr>
"For searching the word in the cursor in the current directory,
noremap <silent> <Leader>s :Unite grep:.::\\b<C-R><C-w>\\b<CR>
"For searching the word in the cursor in the current buffer,
noremap <silent> <Leader>sf :Unite grep:%::\\b<C-r><C-w>\\b<CR>
"For searching the word in the cursor in all opened buffer
noremap <silent> <Leader>sb :Unite grep:$buffers::\\b<C-r><C-w>\\b<CR>

function! s:unite_my_settings()
    "I want to toggle the preview window when I press the "p" key.
    nnoremap <silent><buffer><expr> p
    \ empty(filter(range(1, winnr('$')),
    \ 'getwinvar(v:val, "&previewwindow") != 0')) ?
    \ unite#do_action('preview') : ":\<C-u>pclose!\<CR>"

    nnoremap <silent><buffer><expr> s unite#do_action('split')
    imap <buffer> <C-j>   <Plug>(unite_select_next_line)
    imap <buffer> <C-a>   <Plug>(unite_toggle_mark_all_candidates)
    "imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
    inoremap <buffer> <C-k> <C-w>k
    nnoremap <buffer> <C-k> <C-w>k
    inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
    inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
    inoremap <silent><buffer><expr> <C-t> unite#do_action('tabopen')
    nnoremap <silent><buffer><expr> v unite#do_action('vsplit')
    nnoremap <silent><buffer><expr> t unite#do_action('tabopen')

    nmap <buffer> q <Plug>(unite_exit)
    imap <buffer> <C-q> <Plug>(unite_exit)
endfunction
autocmd FileType unite call s:unite_my_settings()

nnoremap [unite]o :Unite -buffer-name=buffers -start-insert -winheight=10 tab buffer<cr>
nnoremap <F7> :Unite -buffer-name=yank -winheight=10 -start-insert history/yank<cr>
nnoremap [unite]m :Unite bookmark <cr>
nnoremap [unite]g :Unite register <cr>
nnoremap [unite]p :Unite mapping <cr>
nnoremap [unite]r :Unite resume <cr>
nnoremap [unite]f :Unite -start-insert file <cr>
nnoremap [unite]h :<C-u>UniteWithBufferDir -start-insert file<cr>
nnoremap [unite]c :<C-u>UniteWithCurrentDir -start-insert file<cr>
" re-open last Unite buffer
nnoremap <silent>[unite]u :<C-u>UniteResume<CR>
nnoremap <silent>[unite]; :Unite line<CR>
"}}}
