set nocompatible
filetype off

set runtimepath=$HOME/myvim,$VIMRUNTIME

"{{{ NeoBundle
if has('vim_starting')
  set nocompatible               " Be iMproved

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#rc(expand('$HOME/myvim/bundle'))
"set rtp+=~/powerline/powerline/bindings/vim

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundleDisable 'terryma/vim-multiple-cursors' " conflict with neocomplete
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'xolox/vim-notes'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'tpope/vim-surround'
NeoBundle 'Spaceghost/vim-matchit'
NeoBundle 'showgood/tagbar'
NeoBundle 'kana/vim-textobj-function'
NeoBundle 'ReplaceWithRegister'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'vim-scripts/VisIncr'
"NeoBundle 'SirVer/ultisnips'
NeoBundle 'benmills/vimux'
NeoBundle 'Shougo/vimshell'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'showgood/misc_vim'
NeoBundle 'showgood/vim_mark'
NeoBundle 'xolox/vim-misc' "needed by xolox/vim-shell
NeoBundle 'xolox/vim-shell'
NeoBundle 't9md/vim-choosewin'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'bling/vim-airline'
NeoBundleDisable 'terryma/vim-expand-region'
NeoBundle 'mbbill/undotree'
NeoBundleDisable 'chrisbra/csv.vim'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'vimwiki'
"NeoBundleDisable 'Valloric/YouCompleteMe'
NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'szw/vim-ctrlspace'
"NeoBundle 'showgood/eclim'
"NeoBundle 'jonathanfilip/vim-lucius'
"NeoBundle 'zaiste/Atom'
NeoBundle 'tomasr/molokai'
 "NeoBundle 'Shougo/neosnippet.vim'
 "NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'noahfrederick/vim-hemisu'

"quite helpful
NeoBundle 'wellle/tmux-complete.vim'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'honza/vim-snippets'
NeoBundle 'osyo-manga/vim-marching'
NeoBundle 'wellle/targets.vim'
NeoBundle 'junegunn/seoul256.vim'
NeoBundle 'scrooloose/syntastic'
"Bundle 'ZoomWin'

 " You can specify revision/branch/tag.
 "NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

 " Required:
 filetype plugin indent on

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
NeoBundleCheck
"}}}

let ag='/usr/local/bin/ag'
source $HOME/myvim/functions.vim
source $HOME/myvim/vimrc_common
"source $HOME/myvim/vimrc_ycm
source $HOME/myvim/vimrc_unite
source $HOME/myvim/vimrc_ctrlp

autocmd!

set background=light
colorscheme solarized
let g:solarized_termcolors=256
"colorscheme molokai
"colo seoul256

" Light color scheme
"colo seoul256-light
"let g:seoul256_background = 236
"colo seoul256

" Switch
"set background=dark
"set background=light
"colorscheme hemisu
set gfn=Monaco:h12

"open vimrc file in vertical window
nnoremap <leader>ev <C-w><C-v><C-l>:e ~/myvim/vimrc_mac<cr>
syn on

let g:notes_directories = ['~/Dropbox/RMD_notes', '~/Dropbox/trunksync/notes']
let g:notes_suffix = '.txt'
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'
let g:airline#extensions#tmuxline#enabled = 0
let g:ctrlspace_default_mapping_key='<leader>i'
let g:tmuxcomplete#trigger = ''

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/myvim/bundle/vim-snippets/snippets,~/myvim/mysnippets/neosnippets'

let g:marching_enable_neocomplete = 1
"let g:marching_include_paths = [
            "\ "/usr/include/c++/4.2.1" ]
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp =
    \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
