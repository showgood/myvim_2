" {{{ customization for eclim
" -------------------------------
"  customization for eclim
" do context search based on the current file type
" Author: showgood
" -------------------------------
function! DoSearch()
    let buf_filetype = getbufvar(bufnr('%'),'&filetype')
    let searchCmd = ''
    if buf_filetype ==# 'cpp'
        exec 'CSearchContext'
    elseif buf_filetype ==# 'python'
        exec 'PythonSearchContext'
    elseif buf_filetype ==# 'java'
        exec 'JavaSearchContext'
    elseif buf_filetype ==# 'ruby'
        exec 'RubySearchContext'
    elseif buf_filetype ==# 'xml'
        let keyword = expand("<cword>")
        let cmd = "CSearch -p ".keyword." -x declaration"
        exec cmd
    endif
endf

nnoremap <silent> <leader>lf :LocateFile<cr>
nnoremap <silent> <cr> :call DoSearch()<cr>
" nnoremap <silent> <S-cr> :CSearch -p <c-r>=expand("<cword>")<cr> -s all -x references<cr>
let g:EclimLocateFileCaseInsensitive='always'
let g:EclimCSearchSingleResult='edit'
let g:EclimTodoSearchExtensions = ['java', 'py', 'xml', 'cpp', 'hpp']
let g:EclimSearchSkipList = ['obj', 'dep', 'dbo', 'obmp', 'o', 'ti',
                            \'manifest', 'resource', 'RMSfont', 'exe',
                            \'transform', 'dll']

" inoremap <unique> <F6> :CCallHierarchy<cr>
" nnoremap <unique> <F6> :CCallHierarchy<cr>

nnoremap <F1> :ProjectGrep /<c-r>=expand("<cword>")<cr>/ **/*.xml
let g:EclimProjectKeepLocalHistory = 1

nnoremap <leader>de <C-w><C-v><C-l>:e $HOME/myvim/bundle/eclim_luna/eclim/doc/vim/cheatsheet.txt<cr>
map <c-F2> :ProjectTreeToggle<cr>

" search via Google
command -range -nargs=* Gl call eclim#web#SearchEngine(
  \ 'http://www.google.com/search?q=<query>', <q-args>, <line1>, <line2>)
" }}}

function! ShiftEnter()
    if &filetype ==# 'cpp'
        exec "CSearch -p ".expand("<cword>")." -s all -x references"
    elseif &filetype ==# 'xml'
        exec "vimgrep /".expand("<cword>")."/ **/*.xml"
    elseif &buftype ==# 'quickfix'
        set switchbuf+=split
        echom 'in quickfix'
        call feedkeys("\<CR>")
        " todo: not working, reset this open buffer will not in split window
        " set switchbuf-=split
    endif
endfunction

nnoremap  <S-cr> :call ShiftEnter()<cr>
