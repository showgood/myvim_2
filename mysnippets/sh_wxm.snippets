snippet case "case .. esac (case)"
case ${1:word} in
    ${2:pattern} )
    $0;;
esac
endsnippet

snippet elif "elif .. (elif)"
elif ${2:[[ ${1:condition} ]]}; then
    ${0:#statements}
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ )); do
    ${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; do
    ${0:#statements}
done
endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
    $0
${1/['"`](.+)['"`]/$1/}
endsnippet

snippet if "if ... then (if)"
if ${2:[[ ${1:condition} ]]}; then
    ${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
    ${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while ${2:[[ ${1:condition} ]]}; do
    ${0:#statements}
done
endsnippet

snippet #!
`!p snip.rv = '#!/bin/bash' + "\n\n" `
endsnippet

snippet !env "#!/usr/bin/env (!env)"
`!p snip.rv = '#!/usr/bin/env bash' "\n\n" `
endsnippet

snippet argc "memorizable name for $#(number of arguments)"
"$#"
endsnippet

snippet argv "memorizable name for $@(whole arguments in single string)"
"$@"
endsnippet

snippet size()  "memorizable name for getting array size" !a
${#${1:array}[@]}
endsnippet

snippet strlen() "string length"
${#${1:string}}
endsnippet

snippet substr(0) "substring extraction"
${${1:string}:${2:position}}
endsnippet

snippet substr() "substring extraction"
${${1:string}:${2:position}:${3:length}}
endsnippet

snippet delForward "Deletes shortest match of $substring from front of $string."
${${1:string}#${2:substring}}
endsnippet

snippet delLongForward "Deletes longest match of $substring from front of $string."
${${1:string}##${2:substring}}
endsnippet

snippet base "get the base path out of path (if filename not included)"
${1:basepath}=${${2:path}%/}
endsnippet

snippet basef "get the base path out of path (contains filename)"
${1:basepath}=${${2:path}%/*}
endsnippet

snippet fname "get ONLY filename out of full path (contains filename)"
${1:filename_wo_path}=${${2:filename_with_path}##*/}
endsnippet

snippet fbase "get ONLY filename without extension"
${1:filename_wo_extension}=${${2:filename}%.*}
endsnippet

snippet ext "get filename extension"
${1:extension}=${${2:filename}##*.}
endsnippet

snippet optparse "option argument parse"
while getopts "hf:t:" OPTION
do
    case $OPTION in
        h)
            usage
            exit 1
            ;;
        f)
        ${1:option1}=$OPTARG
        ;;
        t)
        ${2:option2}=$OPTARG
        ;;
        ?)
        usage
        exit
        ;;
    esac
done

shift $(($OPTIND - 1))
endsnippet

snippet usage "usage() function"
function usage()
{
cat << EOF
usage: $0 [options] {non-option arguments}

This script do this.. that..

OPTIONS:
   -h                     Show this message
   -t [option2]     option2 argument description
   -f [option1]     option1 argument description
EOF
}
endsnippet
