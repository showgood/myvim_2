set runtimepath=$HOME/myvim,$VIMRUNTIME,$HOME/soft
set directory=.,$TMP,$TEMP
let ag='/usr/bin/ag'

"{{{ NeoBundle
if has('vim_starting')
  set nocompatible               " Be iMproved

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#rc(expand('$HOME/myvim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'showgood/eclim_luna'
NeoBundle 'morhetz/gruvbox'
NeoBundle 'sickill/vim-monokai'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-surround'
NeoBundle 'Spaceghost/vim-matchit'
NeoBundle 'showgood/tagbar'
NeoBundle 'kana/vim-textobj-function'
NeoBundle 'ReplaceWithRegister'
NeoBundle 'showgood/misc_vim'
NeoBundle 'showgood/vim_mark'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'vim-scripts/VisIncr'
NeoBundle 'SirVer/ultisnips'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'mbbill/undotree'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'kshenoy/vim-signature'
NeoBundle 'vimwiki'
NeoBundle 'godlygeek/tabular'
NeoBundle 'tomasr/molokai'
NeoBundle 'rhysd/vim-clang-format'
"NeoBundle 'Raimondi/delimitMate'
"NeoBundle 'vim-scripts/LineJuggler'
"NeoBundleDisable 'chrisbra/csv.vim'
"NeoBundleDisable 'dkprice/vim-easygrep'
"NeoBundleDisable 'tommcdo/vim-exchange'
"NeoBundleDisable 'dhruvasagar/vim-table-mode'
"NeoBundle 'johnsyweb/vim-makeshift'
"NeoBundleDisable 'mbbill/VimExplorer'
"NeoBundle 'thinca/vim-quickrun'
"NeoBundleDisable 'terryma/vim-multiple-cursors' " conflict with neocomplete
NeoBundle 'altercation/vim-colors-solarized'
"NeoBundleDisable 'scrooloose/nerdtree'
"NeoBundle 'thinca/vim-ref'
NeoBundle 'kana/vim-textobj-user'
"NeoBundleDisable 'severin-lemaignan/vim-minimap'
"NeoBundle 'Valloric/YouCompleteMe'
"NeoBundle 'kana/vim-operator-user'
"NeoBundle 'showgood/eclim'
"NeoBundle 'jonathanfilip/vim-lucius'
"NeoBundle 'zaiste/Atom'
 "NeoBundle 'Shougo/neosnippet.vim'
 "NeoBundle 'Shougo/neosnippet-snippets'
"Bundle 'ZoomWin'

 " You can specify revision/branch/tag.
 "NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

 " Required:
 filetype plugin indent on

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
NeoBundleCheck
"}}}

autocmd!

:command -nargs=0 GUI :cd $OPTIMA_GUI
:command -nargs=0 MB :cd $OPTIMA_MB

set clipboard=unnamed
set clipboard+=unnamedplus
set clipboard+=autoselect

"{{{appearance configuration
" those are acceptable colorschemes I have tried
"colorscheme Atom
if has("gui_running")
    set guioptions-=m
    set guioptions-=T
else
    set term=xterm 
    set t_Co=256
endif

"colorscheme monokai
colorscheme molokai
"colorscheme gruvbox
"colorscheme solarized
" colorscheme hybrid
"let g:solarized_termcolors=256
" disable menu & toolbar

" make vim window maximized when startup
"autocmd GUIEnter * simalt ~x
"}}}

" {{{ SVN related mappings
:command -nargs=0 Log :call ExecuteCommand("TortoiseProc.exe /command:log /path:", "%")
:command -nargs=0 Diff :call ExecuteCommand("TortoiseProc.exe /command:diff /path:", "%")
:command -nargs=0 Revert :call ExecuteCommand("TortoiseProc.exe /command:revert /path:", "%")
:command -nargs=0 SvnAdd :call ExecuteCommand("TortoiseProc.exe /command:add /path:", "%")
"}}}

"{{{interaction with explorere, shell
"******* interaction with explorere, shell **********************
function OpenShellIn(location)
    let cmd='!start '.g:console. ' /dir '.a:location . ' /single /cmd {bash}'
    execute cmd
endfunction

function OpenExplorerIn(location)
    execute  '!start '. g:explorer . ' /OPEN '.a:location
endfunction

" open current file folder in Bash(Console)
:command -nargs=0 Bash :call OpenShellIn('%:p:h')

"open current file folder in multicommander
:command -nargs=0 Exp :call OpenExplorerIn('%:p:h')

"open the Current working directory in MultiCommander
:command -nargs=0 CWD :call OpenExplorerIn(getcwd())

"open current working directory in Bash(Console)
:command -nargs=0 BC :call OpenShellIn(getcwd())
"******* END: interaction with explorere, shell ******************
"}}}

let g:shell_mappings_enabled=0

source $HOME/myvim/vimrc_common
source $HOME/myvim/functions.vim
source $HOME/myvim/vimrc_eclim
filetype off

:command -nargs=0 Comp :call CompareSideBySide()
vmap <leader>g <Esc>:OpenUrl <c-r>=GetVisual("false")<cr><cr>

" OR ELSE just highlight the match in red...
function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=white ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction

"free mapping so far
",a
",d
",f
",g
",h
",i
",l
",q
",r
",t
",v
",x
",y
syn on

"open vimrc file in vertical window
nnoremap <leader>ev <C-w><C-v><C-l>:e $HOME/myvim/vimrc_linux<cr>

autocmd BufReadPre SConstruct set filetype=python
autocmd BufReadPre SConscript set filetype=python

"backup the file if file.bak doesn't exist
function! Backup(file)
    let bak=a:file.'.bak'
    if empty(glob(bak))
        exec 'w '.bak
    endif
endfunction

function! DecodeOptLog(log)
    call Backup(a:log)
    let decoder=$HOME.'wxm/mytools/DecodeOptLog.py'
    exec '%!python '.decoder
    exec 'highlight WARN ctermbg=red guibg=red'
    exec 'match WARN /.*Assertion.*/'
endfunction

"decode timestamp in optima.log
:command -nargs=0 Dl :call DecodeOptLog(expand('%:p'))

function! ReadEvent(event)
    call Backup(a:event)
    let eventReader=$HOME.'wxm/mytools/ReadEvents.py'

    let cmd= '!python '.eventReader.' -f '.a:event.' | tee tmp'
    exec cmd
    call ExecuteCommand("cp tmp", " ".a:event)
    call ExecuteCommand("rm -f ", "tmp")
    exec 'e'
endfunction

:command -nargs=0 Re :call ReadEvent(expand('%:p'))
:command -range Ais <line1>,<line2>!python /home/xiaoming/wxm/mytools/DecodeAIS.py
:command! -range Ots <line1>,<line2>!python /home/xiaoming/wxm/mytools/DecodeOTS.py
:command -range Pa <line1>,<line2>!python /home/xiaoming/wxm/mytools/Parameters.py
:command! -range Ee <line1>,<line2>!python /home/xiaoming/wxm/mytools/extractEeprom.py

let g:clang_format#command='~/build_llvm/Release+Asserts/bin/clang-format'
:command! -nargs=0 Nc :set completefunc=neocomplete#complete#auto_complete
" {{{ folding
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>Z zMzvzz
" }}}
let g:rehash256 = 1
"/* vim: set foldmethod=marker: */
