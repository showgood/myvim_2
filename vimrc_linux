set runtimepath=$HOME/myvim,$VIMRUNTIME,$HOME/soft
set directory=.,$TMP,$TEMP
let ag='/usr/bin/ag'

"{{{ NeoBundle
if has('vim_starting')
  set nocompatible               " Be iMproved

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#rc(expand('$HOME/myvim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundleDisable 'altercation/vim-colors-solarized'
NeoBundleDisable 'xolox/vim-notes'
NeoBundle 'Shougo/vimproc.vim'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'kana/vim-textobj-user'
NeoBundle 'tpope/vim-surround'
NeoBundle 'Spaceghost/vim-matchit'
NeoBundle 'showgood/tagbar'
NeoBundle 'kana/vim-textobj-function'
NeoBundle 'ReplaceWithRegister'
NeoBundle 'showgood/misc_vim'
NeoBundle 'showgood/vim_mark'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'vim-scripts/VisIncr'
"NeoBundleDisable 'SirVer/ultisnips'
NeoBundle 'Shougo/vimshell'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'xolox/vim-misc' "needed by xolox/vim-shell
NeoBundle 'xolox/vim-shell'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'bling/vim-airline'  "not very useful to me
"NeoBundleDisable 'terryma/vim-expand-region'
NeoBundle 'mbbill/undotree'
"NeoBundleDisable 'chrisbra/csv.vim'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'kshenoy/vim-signature'
"NeoBundleDisable 'dkprice/vim-easygrep'
"NeoBundleDisable 'vimwiki'
"NeoBundleDisable 'tommcdo/vim-exchange'
"NeoBundle 'godlygeek/tabular'
"NeoBundleDisable 'dhruvasagar/vim-table-mode'
"NeoBundle 'Raimondi/delimitMate'
"NeoBundle 'Valloric/YouCompleteMe'
NeoBundle 'tomasr/molokai'
NeoBundle 'rhysd/vim-clang-format'
"NeoBundle 'showgood/eclim'
"NeoBundle 'zaiste/Atom'
NeoBundle 'Shougo/neosnippet.vim'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'szw/vim-ctrlspace'
NeoBundle 'wellle/tmux-complete.vim'
NeoBundle 'honza/vim-snippets'
NeoBundle 'osyo-manga/vim-marching'
NeoBundle 'wellle/targets.vim'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Shougo/vimfiler.vim'
"Bundle 'ZoomWin'

 " You can specify revision/branch/tag.
 "NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }

 " Required:
 filetype plugin indent on

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
NeoBundleCheck
"}}}

autocmd!

:command -nargs=0 GUI :cd $OPTIMA_GUI
:command -nargs=0 MB :cd $OPTIMA_MB

set clipboard=unnamed
set clipboard+=unnamedplus
set clipboard+=autoselect
set gfn=Monaco\ 11

"{{{appearance configuration
" those are acceptable colorschemes I have tried
"colorscheme Atom
 colorscheme molokai
"colorscheme solarized
" colorscheme hybrid

" disable menu & toolbar
set guioptions-=m
set guioptions-=T

" make vim window maximized when startup
"autocmd GUIEnter * simalt ~x
"}}}

"{{{interaction with explorere, shell
"******* interaction with explorere, shell **********************
function OpenShellIn(location)
    let cmd='!start '.g:console. ' /dir '.a:location . ' /single /cmd {bash}'
    execute cmd
endfunction

function OpenExplorerIn(location)
    execute  '!start '. g:explorer . ' /OPEN '.a:location
endfunction

" open current file folder in Bash(Console)
:command -nargs=0 Bash :call OpenShellIn('%:p:h')

"open current file folder in multicommander
:command -nargs=0 Exp :call OpenExplorerIn('%:p:h')

"open the Current working directory in MultiCommander
:command -nargs=0 CWD :call OpenExplorerIn(getcwd())

"open current working directory in Bash(Console)
:command -nargs=0 BC :call OpenShellIn(getcwd())
"******* END: interaction with explorere, shell ******************
"}}}

let g:shell_mappings_enabled=0

source $HOME/myvim/vimrc_common
source $HOME/myvim/functions.vim
filetype off

:command -nargs=0 Comp :call CompareSideBySide()
:command -nargs=0 Bc :call xolox#shell#execute("BComp.exe ".expand('%:p'), 0)
vmap <leader>g <Esc>:OpenUrl <c-r>=GetVisual("false")<cr><cr>
:command -nargs=0 Excel :!start C:/Program Files/Microsoft Office/Office12/EXCEL.EXE %:p

let g:vimshell_vimshrc_path='~/myvim/.vimshrc_windows'

let g:notes_directories = ['~/Dropbox/RMD_notes', '~/Dropbox/trunksync/notes', '~/Dropbox/Write']
let g:notes_suffix = '.note'
let g:notes_title_sync = 'no'

" OR ELSE just highlight the match in red...
function! HLNext (blinktime)
    highlight WhiteOnRed ctermfg=white ctermbg=red
    let [bufnum, lnum, col, off] = getpos('.')
    let matchlen = strlen(matchstr(strpart(getline('.'),col-1),@/))
    let target_pat = '\c\%#'.@/
    let ring = matchadd('WhiteOnRed', target_pat, 101)
    redraw
    exec 'sleep ' . float2nr(a:blinktime * 1000) . 'm'
    call matchdelete(ring)
    redraw
endfunction

"free mapping so far
",a
",d
",f
",g
",h
",i
",l
",q
",r
",t
",v
",x
",y
syn on

"open vimrc file in vertical window
nnoremap <leader>ev <C-w><C-v><C-l>:e $HOME/myvim/vimrc_linux<cr>

autocmd BufReadPre SConstruct set filetype=python
autocmd BufReadPre SConscript set filetype=python

"backup the file if file.bak doesn't exist
function! Backup(file)
    let bak=a:file.'.bak'
    if empty(glob(bak))
        exec 'w '.bak
    endif
endfunction

function! DecodeOptLog(log)
    call Backup(a:log)
    let decoder=$HOME.'wxm/mytools/DecodeOptLog.py'
    exec '%!python '.decoder
    exec 'highlight WARN ctermbg=red guibg=red'
    exec 'match WARN /.*Assertion.*/'
endfunction

"decode timestamp in optima.log
:command -nargs=0 Dl :call DecodeOptLog(expand('%:p'))

function! ReadEvent(event)
    call Backup(a:event)
    let cmd= '!python /home/xiaoming/wxm/mytools/ReadEvents.py -f '.a:event.' | tee tmp'
    exec cmd
    call ExecuteCommand("cp tmp", " ".a:event)
    call ExecuteCommand("rm -f ", "tmp")
    exec 'e'
endfunction

:command -nargs=0 Re :call ReadEvent(expand('%:p'))
:command -range Ais <line1>,<line2>!python /home/xiaoming/wxm/mytools/DecodeAIS.py
:command! -range Ots <line1>,<line2>!python /home/xiaoming/wxm/mytools/DecodeOTS.py
:command -range Pa <line1>,<line2>!python /home/xiaoming/wxm/mytools/Parameters.py
:command! -range Ee <line1>,<line2>!python /home/xiaoming/wxm/mytools/extractEeprom.py

let g:ycm_global_ycm_extra_conf = '~/myvim/.ycm_extra_conf_linux.py'
let g:clang_format#command='~/build_llvm/Release+Asserts/bin/clang-format'
:command! -nargs=0 Nc :set completefunc=neocomplete#complete#auto_complete
" {{{ folding
nnoremap zO zCzO

" Use ,z to "focus" the current fold.
nnoremap <leader>Z zMzvzz
" }}}

let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'
let g:airline#extensions#tmuxline#enabled = 0
let g:ctrlspace_default_mapping_key='<leader>i'
let g:tmuxcomplete#trigger = ''

imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/myvim/bundle/vim-snippets/snippets,~/myvim/mysnippets/neosnippets'

let g:marching_enable_neocomplete = 1
"let g:marching_include_paths = [
            "\ "/usr/include/c++/4.2.1" ]
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif

let g:neocomplete#force_omni_input_patterns.cpp =
    \ '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Called once right before you start selecting multiple cursors
function! Multiple_cursors_before()
   if exists(':NeoCompleteLock')==2
       exe 'NeoCompleteLock'
    endif
endfunction

"         " Called once only when the multiple selection is canceled (default <Esc>)
function! Multiple_cursors_after()
    if exists(':NeoCompleteUnlock')==2
    exe 'NeoCompleteUnlock'
    endif
endfunction

let g:loaded_netrwPlugin = 1
let g:vimfiler_as_default_explorer = 1

"/* vim: set foldmethod=marker: */
